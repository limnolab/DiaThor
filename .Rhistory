#Loads the species list specific for this index
slaDB <- diathor::sla
library(diathor)
#Loads the species list specific for this index
slaDB <- diathor::sla
diat_sla(resultLoad)
## TEST AFTER THE REVIEW
species_df <- as.data.frame(read.csv("C:/Users/Juaco/Desktop/Prueba Diathor/datos.csv"))
resultsPath <- "C:/Users/Juaco/Desktop/Prueba Diathor/Resultados"
maxDistTaxa = 2
resultLoad <- diat_loadData(species_df, resultsPath = resultsPath)
taxaIn <- resultLoad[[2]]
#Loads the species list specific for this index
idchDB <- diathor::idch
#creates a species column with the rownames to fit in the script
taxaIn$species <- row.names(taxaIn)
# #the ones still not found (NA), try against fullspecies
taxaIn$idch_v <- NA
taxaIn$idch_s <- NA
print("Calculating IDCH index")
for (i in 1:nrow(taxaIn)) {
if (is.na(taxaIn$idch_s[i]) | is.na(taxaIn$idch_v[i])){
# New in v0.0.8
# Uses the stringdist package to find species by names heuristically, with a maximum distance = maxDistTaxa
# if multiple are found, uses majority consensus to select the correct index value
# 1) find the species by heuristic search
spname <- trimws(tolower(rownames(taxaIn[i,])))
species_found <- idchDB[stringdist::ain(trimws(tolower(idchDB$fullspecies)),spname, maxDist=maxDistTaxa, matchNA = FALSE),]
# 2) if found, build majority consensus for sensitivity values
if (nrow(species_found) == 1){
vvalue <- as.numeric(names(which.max(table(species_found$idch_v))))
svalue <- as.numeric(names(which.max(table(species_found$idch_s))))
taxaIn$new_species[i] <- species_found$fullspecies[1]
} else if (nrow(species_found) > 1){
species_found <- species_found[match(spname, trimws(tolower(species_found$fullspecies)), nomatch=1),]
vvalue <- as.numeric(names(which.max(table(species_found$idch_v))))
svalue <- as.numeric(names(which.max(table(species_found$idch_s))))
} else if (nrow(species_found) == 0){
#species not found, try tautonomy in variety
spsplit <- strsplit(spname, " ") #split the name
#if has epiteth
if (length(spsplit[[1]])>1){
#create vectors with possible epiteths
newspname <- paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "var.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ") #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "fo.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "subsp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "spp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "ssp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "var.", spsplit[[1]][[2]], "fo.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
#search again against all possible epiteths
species_found <- idchDB[stringdist::ain(trimws(tolower(idchDB$fullspecies)),newspname, maxDist=maxDistTaxa, matchNA = FALSE),]
if (nrow(species_found) > 0){
#found with tautonomy
vvalue <- as.numeric(names(which.max(table(species_found$idch_v[1]))))
svalue <- as.numeric(names(which.max(table(species_found$idch_s[1]))))
taxaIn$new_species[i] <- species_found$fullspecies[1]
} else {
#species not found, make everything NA
vvalue = NA
svalue = NA
}
}
}
#records the final consensus value
taxaIn$idch_v[i] <- vvalue
taxaIn$idch_s[i] <- svalue
}
}
#gets the column named "new_species", everything before that is a sample
lastcol <- which(colnames(taxaIn)=="new_species")
View(taxaIn)
View(idchDB)
write.csv(taxaIn, file.choose())
index_new_clean <- idchDB
index_new_clean <- rbind(c("Gomphonema", "0", "0"))
index_new_clean <- idchDB
index_new_clean <- rbind(idchDB, c("Gomphonema", "0", "0"))
View(index_new_clean)
#graba como parte de diathro
idch <- index_new_clean
#save acronyms
idchDB <- idch
usethis::use_data(idch, overwrite = T)
library(diathor)
diat_idch(resultLoad)
## TEST AFTER THE REVIEW
species_df <- as.data.frame(read.csv("C:/Users/Juaco/Desktop/Prueba Diathor/datos.csv"))
resultsPath <- "C:/Users/Juaco/Desktop/Prueba Diathor/Resultados"
maxDistTaxa = 2
resultLoad <- diat_loadData(species_df, resultsPath = resultsPath)
diat_des(resultLoad)
taxaIn <- resultLoad[[2]]
#Loads the species list specific for this index
desDB <- diathor::des
#creates a species column with the rownames to fit in the script
taxaIn$species <- row.names(taxaIn)
# #the ones still not found (NA), try against fullspecies
taxaIn$des_v <- NA
taxaIn$des_s <- NA
print("Calculating DES index")
for (i in 1:nrow(taxaIn)) {
if (is.na(taxaIn$des_s[i]) | is.na(taxaIn$des_v[i])){
# New in v0.0.8
# Uses the stringdist package to find species by names heuristically, with a maximum distance = maxDistTaxa
# if multiple are found, uses majority consensus to select the correct index value
# 1) find the species by heuristic search
spname <- trimws(tolower(rownames(taxaIn[i,])))
species_found <- desDB[stringdist::ain(trimws(tolower(desDB$fullspecies)),spname, maxDist=maxDistTaxa, matchNA = FALSE),]
# 2) if found, build majority consensus for sensitivity values
if (nrow(species_found) == 1){
vvalue <- as.numeric(names(which.max(table(species_found$des_v))))
svalue <- as.numeric(names(which.max(table(species_found$des_s))))
taxaIn$new_species[i] <- species_found$fullspecies[1]
} else if (nrow(species_found) > 1){
species_found <- species_found[match(spname, trimws(tolower(species_found$fullspecies)), nomatch=1),]
vvalue <- as.numeric(names(which.max(table(species_found$des_v))))
svalue <- as.numeric(names(which.max(table(species_found$des_s))))
} else if (nrow(species_found) == 0){
#species not found, try tautonomy in variety
spsplit <- strsplit(spname, " ") #split the name
#if has epiteth
if (length(spsplit[[1]])>1){
#create vectors with possible epiteths
newspname <- paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "var.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ") #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "fo.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "subsp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "spp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "ssp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "var.", spsplit[[1]][[2]], "fo.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
#search again against all possible epiteths
species_found <- desDB[stringdist::ain(trimws(tolower(desDB$fullspecies)),newspname, maxDist=maxDistTaxa, matchNA = FALSE),]
if (nrow(species_found) > 0){
#found with tautonomy
vvalue <- as.numeric(names(which.max(table(species_found$des_v[1]))))
svalue <- as.numeric(names(which.max(table(species_found$des_s[1]))))
taxaIn$new_species[i] <- species_found$fullspecies[1]
} else {
#species not found, make everything NA
vvalue = NA
svalue = NA
}
}
}
#records the final consensus value
taxaIn$des_v[i] <- vvalue
taxaIn$des_s[i] <- svalue
}
}
#removes NA from taxaIn
taxaIn[is.na(taxaIn)] <- 0
View(taxaIn)
taxaIn <- resultLoad[[2]]
#Loads the species list specific for this index
desDB <- diathor::des
#creates a species column with the rownames to fit in the script
taxaIn$species <- row.names(taxaIn)
# #the ones still not found (NA), try against fullspecies
taxaIn$des_v <- NA
taxaIn$des_s <- NA
print("Calculating DES index")
for (i in 1:nrow(taxaIn)) {
if (is.na(taxaIn$des_s[i]) | is.na(taxaIn$des_v[i])){
# New in v0.0.8
# Uses the stringdist package to find species by names heuristically, with a maximum distance = maxDistTaxa
# if multiple are found, uses majority consensus to select the correct index value
# 1) find the species by heuristic search
spname <- trimws(tolower(rownames(taxaIn[i,])))
species_found <- desDB[stringdist::ain(trimws(tolower(desDB$fullspecies)),spname, maxDist=maxDistTaxa, matchNA = FALSE),]
# 2) if found, build majority consensus for sensitivity values
if (nrow(species_found) == 1){
vvalue <- as.numeric(names(which.max(table(species_found$des_v))))
svalue <- as.numeric(names(which.max(table(species_found$des_s))))
taxaIn$new_species[i] <- species_found$fullspecies[1]
} else if (nrow(species_found) > 1){
species_found <- species_found[match(spname, trimws(tolower(species_found$fullspecies)), nomatch=1),]
vvalue <- as.numeric(names(which.max(table(species_found$des_v))))
svalue <- as.numeric(names(which.max(table(species_found$des_s))))
} else if (nrow(species_found) == 0){
#species not found, try tautonomy in variety
spsplit <- strsplit(spname, " ") #split the name
#if has epiteth
if (length(spsplit[[1]])>1){
#create vectors with possible epiteths
newspname <- paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "var.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ") #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "fo.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "subsp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "spp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "ssp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "var.", spsplit[[1]][[2]], "fo.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
#search again against all possible epiteths
species_found <- desDB[stringdist::ain(trimws(tolower(desDB$fullspecies)),newspname, maxDist=maxDistTaxa, matchNA = FALSE),]
if (nrow(species_found) > 0){
#found with tautonomy
vvalue <- as.numeric(names(which.max(table(species_found$des_v[1]))))
svalue <- as.numeric(names(which.max(table(species_found$des_s[1]))))
taxaIn$new_species[i] <- species_found$fullspecies[1]
} else {
#species not found, make everything NA
vvalue = NA
svalue = NA
}
}
}
#records the final consensus value
taxaIn$des_v[i] <- vvalue
taxaIn$des_s[i] <- svalue
}
}
View(taxaIn)
index_new_clean <- desDB
View(desDB)
index_new_clean <- rbind(desDB, c("Gomphonema", "0", "0"))
#graba como parte de diathro
des <- index_new_clean
#save acronyms
desDB <- des
usethis::use_data(des, overwrite = T)
library(diathor)
diat_des(resultLoad)
taxaIn <- resultLoad[[2]]
#Loads the species list specific for this index
desDB <- diathor::des
#creates a species column with the rownames to fit in the script
taxaIn$species <- row.names(taxaIn)
# #the ones still not found (NA), try against fullspecies
taxaIn$des_v <- NA
taxaIn$des_s <- NA
print("Calculating DES index")
for (i in 1:nrow(taxaIn)) {
if (is.na(taxaIn$des_s[i]) | is.na(taxaIn$des_v[i])){
# New in v0.0.8
# Uses the stringdist package to find species by names heuristically, with a maximum distance = maxDistTaxa
# if multiple are found, uses majority consensus to select the correct index value
# 1) find the species by heuristic search
spname <- trimws(tolower(rownames(taxaIn[i,])))
species_found <- desDB[stringdist::ain(trimws(tolower(desDB$fullspecies)),spname, maxDist=maxDistTaxa, matchNA = FALSE),]
# 2) if found, build majority consensus for sensitivity values
if (nrow(species_found) == 1){
vvalue <- as.numeric(names(which.max(table(species_found$des_v))))
svalue <- as.numeric(names(which.max(table(species_found$des_s))))
taxaIn$new_species[i] <- species_found$fullspecies[1]
} else if (nrow(species_found) > 1){
species_found <- species_found[match(spname, trimws(tolower(species_found$fullspecies)), nomatch=1),]
vvalue <- as.numeric(names(which.max(table(species_found$des_v))))
svalue <- as.numeric(names(which.max(table(species_found$des_s))))
} else if (nrow(species_found) == 0){
#species not found, try tautonomy in variety
spsplit <- strsplit(spname, " ") #split the name
#if has epiteth
if (length(spsplit[[1]])>1){
#create vectors with possible epiteths
newspname <- paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "var.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ") #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "fo.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "subsp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "spp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "ssp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "var.", spsplit[[1]][[2]], "fo.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
#search again against all possible epiteths
species_found <- desDB[stringdist::ain(trimws(tolower(desDB$fullspecies)),newspname, maxDist=maxDistTaxa, matchNA = FALSE),]
if (nrow(species_found) > 0){
#found with tautonomy
vvalue <- as.numeric(names(which.max(table(species_found$des_v[1]))))
svalue <- as.numeric(names(which.max(table(species_found$des_s[1]))))
taxaIn$new_species[i] <- species_found$fullspecies[1]
} else {
#species not found, make everything NA
vvalue = NA
svalue = NA
}
}
}
#records the final consensus value
taxaIn$des_v[i] <- vvalue
taxaIn$des_s[i] <- svalue
}
}
View(taxaIn)
diat_des(resultLoad)
index_new_clean <- desDB
index_new_clean <- rbind(desDB, c("Cocconeis placentula var. placentula", "2", "4"))
#graba como parte de diathro
des <- index_new_clean
#save acronyms
desDB <- des
usethis::use_data(des, overwrite = T)
library(diathor)
diat_des(resultLoad)
#Loads the species list specific for this index
desDB <- diathor::des
View(desDB)
index_new_clean <- desDB
index_new_clean[528,] <- c("Cocconeis placentula var. placentula", "4", "2")
View(index_new_clean)
#graba como parte de diathro
des <- index_new_clean
#save acronyms
desDB <- des
usethis::use_data(des, overwrite = T)
library(diathor)
diat_des(resultLoad)
diat_epid(resultLoad)
taxaIn <- resultLoad[[2]] #input data
#Loads the species list specific for this index
epidDB <- diathor::epid
#creates a species column with the rownames to fit in the script
taxaIn$species <- row.names(taxaIn)
taxaIn$epid_v <- NA
taxaIn$epid_s <- NA
print("Calculating EPID index")
for (i in 1:nrow(taxaIn)) {
if (is.na(taxaIn$epid_s[i]) | is.na(taxaIn$epid_v[i])){
# New in v0.0.8
# Uses the stringdist package to find species by names heuristically, with a maximum distance = maxDistTaxa
# if multiple are found, uses majority consensus to select the correct index value
# 1) find the species by heuristic search
spname <- trimws(tolower(rownames(taxaIn[i,])))
species_found <- epidDB[stringdist::ain(trimws(tolower(epidDB$fullspecies)),spname, maxDist=maxDistTaxa, matchNA = FALSE),]
# 2) if found, build majority consensus for sensitivity values
if (nrow(species_found) == 1){
vvalue <- as.numeric(names(which.max(table(species_found$epid_v))))
svalue <- as.numeric(names(which.max(table(species_found$epid_s))))
taxaIn$new_species[i] <- species_found$fullspecies[1]
} else if (nrow(species_found) > 1){
species_found <- species_found[match(spname, trimws(tolower(species_found$fullspecies)), nomatch=1),]
vvalue <- as.numeric(names(which.max(table(species_found$epid_v))))
svalue <- as.numeric(names(which.max(table(species_found$epid_s))))
} else if (nrow(species_found) == 0){
#species not found, try tautonomy in variety
spsplit <- strsplit(spname, " ") #split the name
#if has epiteth
if (length(spsplit[[1]])>1){
#create vectors with possible epiteths
newspname <- paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "var.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ") #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "fo.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "subsp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "spp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "ssp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "var.", spsplit[[1]][[2]], "fo.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
#search again against all possible epiteths
species_found <- epidDB[stringdist::ain(trimws(tolower(epidDB$fullspecies)),newspname, maxDist=maxDistTaxa, matchNA = FALSE),]
if (nrow(species_found) > 0){
#found with tautonomy
vvalue <- as.numeric(names(which.max(table(species_found$epid_v[1]))))
svalue <- as.numeric(names(which.max(table(species_found$epid_s[1]))))
taxaIn$new_species[i] <- species_found$fullspecies[1]
} else {
#species not found, make everything NA
vvalue = NA
svalue = NA
}
}
}
#records the final consensus value
taxaIn$epid_v[i] <- vvalue
taxaIn$epid_s[i] <- svalue
}
}
View(taxaIn)
View(epidDB)
### TAXONOMIA CURADA PARA CADA INDICE INTRA OMNIDIA
new_acronyms <- read.csv("D:/Users/Juaco/Google Drive/R Scripts/Paquetes propios/DiaThor/Indices/Taxonomia curada 10.2021/acronyms.csv")
new_index_taxo <- read.csv("D:/Users/Juaco/Google Drive/R Scripts/Paquetes propios/DiaThor/Indices/Taxonomia curada 10.2021/epid.csv")
View(new_index_taxo)
#busca nuevo acronimo, busca el nombre en new_acronyms, y agrega la fila al indice
for (i in 1:nrow(new_index_taxo)) {
oldacro <- new_index_taxo[i,"acronym"]
newacro <- new_acronyms[which(new_acronyms$acronym == oldacro), "new_species"]
#si tiene nuevo acronimo
if (newacro != "" && length(newacro)>0){
newspecies <- ""
oldspecies <- ""
oldspecies <- new_index_taxo[i,]
#get new acronym
newspecies <- new_acronyms[which(new_acronyms$acronym == newacro), ]
#si la especie tiene un acronimo nuevo
if (nrow(newspecies)>0){
if(nrow(newspecies)>1){
#si encontro mas de un acronimo (puede pasar)
newspecies <- newspecies[1,]
}
#busca a ver si ese acronimo nuevo ya existe en el indice, para no duplicar
existacro <- new_index_taxo[which(new_index_taxo$acronym == newspecies$acronym),]
if (nrow(existacro)==0){
#si no existe en el indice, lo agrega. Si ya existe, no lo agrega para no duplicar
newrow <- oldspecies #copia el existente
newrow$fullspecies <- trimws(newspecies$species[1]) #cambia el nombre
new_index_taxo <- rbind(new_index_taxo,newrow) #adiciona
}
}
}
}
#write without algabase
write.csv(new_index_taxo, file="C:/Users/Juaco/Desktop/epid_updated_algaebase.csv")
index_new_clean <- new_index_taxo
View(index_new_clean)
index_new_clean <- index_new_clean[,-1]
#graba como parte de diathro
epid <- index_new_clean
#save acronyms
epidDB <- epid
usethis::use_data(epid, overwrite = T)
library(diathor)
diat_epid(resultLoad)
diat_idap(resultLoad)
taxaIn <- resultLoad[[2]] #indices use raw matrix
#Loads the species list specific for this index
idapDB <- diathor::idap
#creates a species column with the rownames to fit in the script
taxaIn$species <- row.names(taxaIn)
# #the ones still not found (NA), try against fullspecies
taxaIn$idap_v <- NA
taxaIn$idap_s <- NA
print("Calculating IDAP index")
for (i in 1:nrow(taxaIn)) {
if (is.na(taxaIn$idap_s[i]) | is.na(taxaIn$idap_v[i])){
# New in v0.0.8
# Uses the stringdist package to find species by names heuristically, with a maximum distance = maxDistTaxa
# if multiple are found, uses majority consensus to select the correct index value
# 1) find the species by heuristic search
spname <- trimws(tolower(rownames(taxaIn[i,])))
species_found <- idapDB[stringdist::ain(trimws(tolower(idapDB$fullspecies)),spname, maxDist=maxDistTaxa, matchNA = FALSE),]
# 2) if found, build majority consensus for sensitivity values
if (nrow(species_found) == 1){
vvalue <- as.numeric(names(which.max(table(species_found$idap_v))))
svalue <- as.numeric(names(which.max(table(species_found$idap_s))))
taxaIn$new_species[i] <- species_found$fullspecies[1]
} else if (nrow(species_found) > 1){
species_found <- species_found[match(spname, trimws(tolower(species_found$fullspecies)), nomatch=1),]
vvalue <- as.numeric(names(which.max(table(species_found$idap_v))))
svalue <- as.numeric(names(which.max(table(species_found$idap_s))))
} else if (nrow(species_found) == 0){
#species not found, try tautonomy in variety
spsplit <- strsplit(spname, " ") #split the name
#if has epiteth
if (length(spsplit[[1]])>1){
#create vectors with possible epiteths
newspname <- paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "var.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ") #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "fo.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "subsp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "spp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "ssp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "var.", spsplit[[1]][[2]], "fo.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
#search again against all possible epiteths
species_found <- idapDB[stringdist::ain(trimws(tolower(idapDB$fullspecies)),newspname, maxDist=maxDistTaxa, matchNA = FALSE),]
if (nrow(species_found) > 0){
#found with tautonomy
vvalue <- as.numeric(names(which.max(table(species_found$idap_v[1]))))
svalue <- as.numeric(names(which.max(table(species_found$idap_s[1]))))
taxaIn$new_species[i] <- species_found$fullspecies[1]
} else {
#species not found, make everything NA
vvalue = NA
svalue = NA
}
}
}
#records the final consensus value
taxaIn$idap_v[i] <- vvalue
taxaIn$idap_s[i] <- svalue
}
}
#gets the column named "new_species", everything before that is a sample
lastcol <- which(colnames(taxaIn)=="new_species")
View(idapDB)
View(taxaIn)
View(idapDB)
### TAXONOMIA CURADA PARA CADA INDICE INTRA OMNIDIA
new_acronyms <- read.csv("D:/Users/Juaco/Google Drive/R Scripts/Paquetes propios/DiaThor/Indices/Taxonomia curada 10.2021/acronyms.csv")
new_index_taxo <- read.csv("D:/Users/Juaco/Google Drive/R Scripts/Paquetes propios/DiaThor/Indices/Taxonomia curada 10.2021/idap.csv")
View(new_index_taxo)
#busca nuevo acronimo, busca el nombre en new_acronyms, y agrega la fila al indice
for (i in 1:nrow(new_index_taxo)) {
oldacro <- new_index_taxo[i,"acronym"]
newacro <- new_acronyms[which(new_acronyms$acronym == oldacro), "new_species"]
#si tiene nuevo acronimo
if (newacro != "" && length(newacro)>0){
newspecies <- ""
oldspecies <- ""
oldspecies <- new_index_taxo[i,]
#get new acronym
newspecies <- new_acronyms[which(new_acronyms$acronym == newacro), ]
#si la especie tiene un acronimo nuevo
if (nrow(newspecies)>0){
if(nrow(newspecies)>1){
#si encontro mas de un acronimo (puede pasar)
newspecies <- newspecies[1,]
}
#busca a ver si ese acronimo nuevo ya existe en el indice, para no duplicar
existacro <- new_index_taxo[which(new_index_taxo$acronym == newspecies$acronym),]
if (nrow(existacro)==0){
#si no existe en el indice, lo agrega. Si ya existe, no lo agrega para no duplicar
newrow <- oldspecies #copia el existente
newrow$fullspecies <- trimws(newspecies$species[1]) #cambia el nombre
new_index_taxo <- rbind(new_index_taxo,newrow) #adiciona
}
}
}
}
View(new_index_taxo)
#write without algabase
write.csv(new_index_taxo, file="C:/Users/Juaco/Desktop/idap_updated_algaebase.csv")
index_new_clean <- new_index_taxo
View(new_index_taxo)
index_new_clean <- index_new_clean[,-1]
View(index_new_clean)
#graba como parte de diathro
idap <- index_new_clean
#save acronyms
idapDB <- idap
usethis::use_data(idap, overwrite = T)
library(diathor)
diat_idap(resultLoad)
