<<<<<<< Updated upstream
asd
s
library("optimos.prime", lib.loc="C:/Program Files/R/R-3.5.2/library")
op_calculate(environmental_df, species_df)
results <- op_calculate(environmental_df, species_df)
op_plot(results)
setwd("~/GitHub/DiaThor")
=======
round(x / sum(x) * 100, 2))
#remove NAN
rel_abu[is.na(rel_abu)] <- 0
# combine Taxa and other ecological data agian.
taxaInRA = cbind(rel_abu, taxaInRA[, lastcol:ncol(taxaInRA)])
# convert from data.table to tibble
taxaInRA = tibble::tibble(taxaInRA)
## -- prepare loop
guild_labels <- c("Guild: HP", "Guild: LP", "Guild: Mot",
"Guild: Plank", "Guild: Indet", "Guilds Taxa used")
guilds.results <- data.frame(matrix(ncol = 6, nrow = (lastcol -
1)))
colnames(guilds.results) <- guild_labels
print("Calculating ecological guilds")
pb <- txtProgressBar(min = 1, max = (lastcol - 1), style = 3)
## -- loop to fill guild table
for (sampleNumber in 1:(lastcol - 1)) {
# get columns with each guild and remove NAs
guild_HP    = taxaInRA[, startsWith(colnames(taxaInRA), "high_profile_guild")]
guild_LP    = taxaInRA[, startsWith(colnames(taxaInRA), "low_profile_guild")]
guild_Mot   = taxaInRA[, startsWith(colnames(taxaInRA), "motile_guild")]
guild_Plank = taxaInRA[, startsWith(colnames(taxaInRA), "euplanctonic_guild")]
guild_HP[is.na(guild_HP)] = 0
guild_LP[is.na(guild_LP)] = 0
guild_Mot[is.na(guild_Mot)] = 0
guild_Plank[is.na(guild_Plank)] = 0
#total abundance for each guild in each sample
#conditional
if (length(taxaInRA[which(guild_HP == 1),])){
guild_HP_ab <- sum(taxaInRA[which(guild_HP == 1), sampleNumber, with = F], na.rm = T)
} else {
guild_HP_ab <- 0
}
if (length(taxaInRA[which(guild_LP == 1),])){
guild_LP_ab <- sum(taxaInRA[which(guild_LP == 1), sampleNumber, with = F], na.rm = T)
} else {
guild_LP_ab <- 0
}
if (length(taxaInRA[which(guild_Mot == 1),])){
guild_Mot_ab <- sum(taxaInRA[which(guild_Mot == 1), sampleNumber, with = F], na.rm = T)
} else {
guild_Mot_ab <- 0
}
if (length(taxaInRA[which(guild_Plank == 1),])){
guild_Plank_ab <- sum(taxaInRA[which(guild_Plank == 1), sampleNumber, with = F], na.rm = T)
} else {
guild_Plank_ab <- 0
}
guild_indet <- 100 - sum(guild_HP_ab, guild_LP_ab, guild_Mot_ab, guild_Plank_ab)
if (guild_indet < 0) {
guild_indet <- 0
}
#% abundance for each guild
guild_HP_ab <- round(guild_HP_ab, digits = 3)
guild_LP_ab <- round(guild_LP_ab, digits = 3)
guild_Mot_ab <- round(guild_Mot_ab, digits = 3)
guild_Plank_ab <- round(guild_Plank_ab, digits = 3)
guild_indet <- round(guild_indet, digits = 3)
#taxa used for each guild
guildtaxaused <- length(which(guild_HP == 1 & taxaInRA[, sampleNumber, with =F] > 0))
guildtaxaused <- guildtaxaused + length(which(guild_LP ==
1 & taxaInRA[, sampleNumber] > 0))
guildtaxaused <- guildtaxaused + length(which(guild_Mot ==
1 & taxaInRA[, sampleNumber] > 0))
guildtaxaused <- guildtaxaused + length(which(guild_Plank ==
1 & taxaInRA[, sampleNumber] > 0))
guildtaxaused_taxa <- taxaInRA[which(guild_HP == 1 &
taxaInRA[, sampleNumber] > 0), "species"]
guildtaxaused_taxa <- c(guildtaxaused_taxa, taxaInRA[which(guild_LP ==
1 & taxaInRA[, sampleNumber] > 0), "species"])
guildtaxaused_taxa <- c(guildtaxaused_taxa, taxaInRA[which(guild_Mot ==
1 & taxaInRA[, sampleNumber] > 0), "species"])
guildtaxaused_taxa <- c(guildtaxaused_taxa, taxaInRA[which(guild_Plank ==
1 & taxaInRA[, sampleNumber] > 0), "species"])
guild_values <- c(guild_HP_ab, guild_LP_ab, guild_Mot_ab,
guild_Plank_ab, guild_indet, guildtaxaused)
guilds.results[sampleNumber, ] <- guild_values
setTxtProgressBar(pb, sampleNumber)
}
sampleNumber
sampleNumber = 1
# get columns with each guild and remove NAs
guild_HP    = taxaInRA[, startsWith(colnames(taxaInRA), "high_profile_guild")]
guild_LP    = taxaInRA[, startsWith(colnames(taxaInRA), "low_profile_guild")]
guild_Mot   = taxaInRA[, startsWith(colnames(taxaInRA), "motile_guild")]
guild_Plank = taxaInRA[, startsWith(colnames(taxaInRA), "euplanctonic_guild")]
guild_HP[is.na(guild_HP)] = 0
guild_LP[is.na(guild_LP)] = 0
guild_Mot[is.na(guild_Mot)] = 0
guild_Plank[is.na(guild_Plank)] = 0
which(guild_HP == 1)
length(taxaInRA[which(guild_HP == 1),])
length(taxaInRA[which(guild_HP == 1)])
length(taxaInRA[which(guild_HP == 1)]>1)
length(taxaInRA[which(guild_HP == 1)])
species_df <- as.data.frame(read.csv("C:/Users/Juaco/Desktop/In.silico.dataset.csv"))
resultsPath <- "C:/Users/Juaco/Desktop/Resultados"
resultLoad <- diat_loadData(species_df, resultsPath = resultsPath)
#gets the column named "species", everything before that is a sample
lastcol <- which(colnames(taxaInEco)=="species")
#Convert taxaIn sample data to Relative Abundance data
taxaInRA <- taxaInEco
taxaInEco <- resultLoad[[5]]
#checks thata taxaInEco (taxaInEco from diat_Load) has at least recognized some species
if (nrow(taxaInEco)==0){
print("No species were recognized for guild calculations")
print("Guild data will not be available")
guilds.results <- NULL
return(guilds.results)
}
#gets the column named "species", everything before that is a sample
lastcol <- which(colnames(taxaInEco)=="species")
#Convert taxaIn sample data to Relative Abundance data
taxaInRA <- taxaInEco
taxaInRA_samples = taxaInRA[, 1:(lastcol - 1)]
setDT(taxaInRA_samples)
# replace NA with 0
setnafill(taxaInRA_samples, fill = 0)
#compute relative abundances
rel_abu  = apply(taxaInRA_samples, 2, function(x)
round(x / sum(x) * 100, 2))
#remove NAN
rel_abu[is.na(rel_abu)] <- 0
# combine Taxa and other ecological data agian.
taxaInRA = cbind(rel_abu, taxaInRA[, lastcol:ncol(taxaInRA)])
# convert from data.table to tibble
taxaInRA = tibble::tibble(taxaInRA)
## -- prepare loop
guild_labels <- c("Guild: HP", "Guild: LP", "Guild: Mot",
"Guild: Plank", "Guild: Indet", "Guilds Taxa used")
guilds.results <- data.frame(matrix(ncol = 6, nrow = (lastcol -
1)))
colnames(guilds.results) <- guild_labels
print("Calculating ecological guilds")
pb <- txtProgressBar(min = 1, max = (lastcol - 1), style = 3)
sampleNumber = 1
# get columns with each guild and remove NAs
guild_HP    = taxaInRA[, startsWith(colnames(taxaInRA), "high_profile_guild")]
guild_LP    = taxaInRA[, startsWith(colnames(taxaInRA), "low_profile_guild")]
guild_Mot   = taxaInRA[, startsWith(colnames(taxaInRA), "motile_guild")]
guild_Plank = taxaInRA[, startsWith(colnames(taxaInRA), "euplanctonic_guild")]
guild_HP[is.na(guild_HP)] = 0
guild_LP[is.na(guild_LP)] = 0
guild_Mot[is.na(guild_Mot)] = 0
guild_Plank[is.na(guild_Plank)] = 0
#total abundance for each guild in each sample
#conditional
if (length(taxaInRA[which(guild_HP == 1)])){
guild_HP_ab <- sum(taxaInRA[which(guild_HP == 1), sampleNumber, with = F], na.rm = T)
} else {
guild_HP_ab <- 0
}
guild_HP
## TEST AFTER THE REVIEW
species_df <- as.data.frame(read.csv("C:/Users/Juaco/Desktop/Prueba Diathor/datos.csv"))
resultsPath <- "C:/Users/Juaco/Desktop/Prueba Diathor/Resultados"
resultLoad <- diat_loadData(species_df, resultsPath = resultsPath)
taxaInEco <- resultLoad[[5]]
#checks thata taxaInEco (taxaInEco from diat_Load) has at least recognized some species
if (nrow(taxaInEco)==0){
print("No species were recognized for guild calculations")
print("Guild data will not be available")
guilds.results <- NULL
return(guilds.results)
}
#gets the column named "species", everything before that is a sample
lastcol <- which(colnames(taxaInEco)=="species")
#Convert taxaIn sample data to Relative Abundance data
taxaInRA <- taxaInEco
taxaInRA_samples = taxaInRA[, 1:(lastcol - 1)]
setDT(taxaInRA_samples)
# replace NA with 0
setnafill(taxaInRA_samples, fill = 0)
#compute relative abundances
rel_abu  = apply(taxaInRA_samples, 2, function(x)
round(x / sum(x) * 100, 2))
#remove NAN
rel_abu[is.na(rel_abu)] <- 0
# combine Taxa and other ecological data agian.
taxaInRA = cbind(rel_abu, taxaInRA[, lastcol:ncol(taxaInRA)])
# convert from data.table to tibble
taxaInRA = tibble::tibble(taxaInRA)
## -- prepare loop
guild_labels <- c("Guild: HP", "Guild: LP", "Guild: Mot",
"Guild: Plank", "Guild: Indet", "Guilds Taxa used")
guilds.results <- data.frame(matrix(ncol = 6, nrow = (lastcol -
1)))
colnames(guilds.results) <- guild_labels
print("Calculating ecological guilds")
pb <- txtProgressBar(min = 1, max = (lastcol - 1), style = 3)
# get columns with each guild and remove NAs
guild_HP    = taxaInRA[, startsWith(colnames(taxaInRA), "high_profile_guild")]
guild_HP
species_df <- as.data.frame(read.csv("C:/Users/Juaco/Desktop/In.silico.dataset.csv"))
resultsPath <- "C:/Users/Juaco/Desktop/Resultados"
resultLoad <- diat_loadData(species_df, resultsPath = resultsPath)
taxaInEco <- resultLoad[[5]]
#checks thata taxaInEco (taxaInEco from diat_Load) has at least recognized some species
if (nrow(taxaInEco)==0){
print("No species were recognized for guild calculations")
print("Guild data will not be available")
guilds.results <- NULL
return(guilds.results)
}
#gets the column named "species", everything before that is a sample
lastcol <- which(colnames(taxaInEco)=="species")
#Convert taxaIn sample data to Relative Abundance data
taxaInRA <- taxaInEco
taxaInRA_samples = taxaInRA[, 1:(lastcol - 1)]
setDT(taxaInRA_samples)
# replace NA with 0
setnafill(taxaInRA_samples, fill = 0)
#compute relative abundances
rel_abu  = apply(taxaInRA_samples, 2, function(x)
round(x / sum(x) * 100, 2))
#remove NAN
rel_abu[is.na(rel_abu)] <- 0
# combine Taxa and other ecological data agian.
taxaInRA = cbind(rel_abu, taxaInRA[, lastcol:ncol(taxaInRA)])
# convert from data.table to tibble
taxaInRA = tibble::tibble(taxaInRA)
## -- prepare loop
guild_labels <- c("Guild: HP", "Guild: LP", "Guild: Mot",
"Guild: Plank", "Guild: Indet", "Guilds Taxa used")
guilds.results <- data.frame(matrix(ncol = 6, nrow = (lastcol -
1)))
colnames(guilds.results) <- guild_labels
print("Calculating ecological guilds")
pb <- txtProgressBar(min = 1, max = (lastcol - 1), style = 3)
# get columns with each guild and remove NAs
guild_HP    = taxaInRA[, startsWith(colnames(taxaInRA), "high_profile_guild")]
guild_HP
guild_LP    = taxaInRA[, startsWith(colnames(taxaInRA), "low_profile_guild")]
guild_Mot   = taxaInRA[, startsWith(colnames(taxaInRA), "motile_guild")]
guild_Plank = taxaInRA[, startsWith(colnames(taxaInRA), "euplanctonic_guild")]
guild_HP[is.na(guild_HP)] = 0
guild_LP[is.na(guild_LP)] = 0
guild_Mot[is.na(guild_Mot)] = 0
guild_Plank[is.na(guild_Plank)] = 0
#total abundance for each guild in each sample
#conditional
if (length(taxaInRA[which(guild_HP == 1)])){
guild_HP_ab <- sum(taxaInRA[which(guild_HP == 1), sampleNumber, with = F], na.rm = T)
} else {
guild_HP_ab <- 0
}
guild_HP == 1
which(guild_HP == 1)
taxaInRA[which(guild_HP == 1)]
taxa[1,186]
taxaInRA[1,186]
taxaInRA[186,1]
length(taxaInRA[which(guild_HP == 1),])
length(taxaInRA[which(guild_LP == 1)])
length(taxaInRA[which(guild_LP == 1)],)
length(taxaInRA[which(guild_LP == 1),])
sum(taxaInRA[which(guild_LP == 1), sampleNumber, with = F], na.rm = T)
taxaInRA[which(guild_LP == 1)
, sampleNumber, with = F]
taxaInRA[which(guild_HP == 1),]
taxaInRA[which(guild_LP == 1),]
nrow(taxaInRA[which(guild_LP == 1),])
nrow(taxaInRA[which(guild_LP == 1)])
taxaInRA[which(guild_LP == 1),]
taxaInRA[which(guild_HP == 1),]
length(taxaInRA[which(guild_HP == 1),])
taxaInRA[which(guild_HP == 1)]
which(guild_HP == 1)
taxaInRA[which(guild_HP == 1),]
length(taxaInRA[which(guild_HP == 1),])
length(taxaInRA[which(guild_LP == 1),])
length(taxaInRA[which(guild_LP == 1),sampleNumber])
length(taxaInRA[which(guild_HP == 1),sampleNumber])
guild_HP
taxaInRA[which(guild_HP == 1),sampleNumber]
taxaInRA[which(guild_LP == 1),sampleNumber]
nrow(taxaInRA[which(guild_HP == 1),sampleNumber])
nrow(taxaInRA[which(guild_LP == 1),sampleNumber])
taxaInEco <- resultLoad[[5]]
#checks thata taxaInEco (taxaInEco from diat_Load) has at least recognized some species
if (nrow(taxaInEco)==0){
print("No species were recognized for guild calculations")
print("Guild data will not be available")
guilds.results <- NULL
return(guilds.results)
}
#gets the column named "species", everything before that is a sample
lastcol <- which(colnames(taxaInEco)=="species")
#Convert taxaIn sample data to Relative Abundance data
taxaInRA <- taxaInEco
taxaInRA_samples = taxaInRA[, 1:(lastcol - 1)]
setDT(taxaInRA_samples)
# replace NA with 0
setnafill(taxaInRA_samples, fill = 0)
#compute relative abundances
rel_abu  = apply(taxaInRA_samples, 2, function(x)
round(x / sum(x) * 100, 2))
#remove NAN
rel_abu[is.na(rel_abu)] <- 0
# combine Taxa and other ecological data agian.
taxaInRA = cbind(rel_abu, taxaInRA[, lastcol:ncol(taxaInRA)])
# convert from data.table to tibble
taxaInRA = tibble::tibble(taxaInRA)
## -- prepare loop
guild_labels <- c("Guild: HP", "Guild: LP", "Guild: Mot",
"Guild: Plank", "Guild: Indet", "Guilds Taxa used")
guilds.results <- data.frame(matrix(ncol = 6, nrow = (lastcol -
1)))
colnames(guilds.results) <- guild_labels
print("Calculating ecological guilds")
pb <- txtProgressBar(min = 1, max = (lastcol - 1), style = 3)
## -- loop to fill guild table
for (sampleNumber in 1:(lastcol - 1)) {
# get columns with each guild and remove NAs
guild_HP    = taxaInRA[, startsWith(colnames(taxaInRA), "high_profile_guild")]
guild_LP    = taxaInRA[, startsWith(colnames(taxaInRA), "low_profile_guild")]
guild_Mot   = taxaInRA[, startsWith(colnames(taxaInRA), "motile_guild")]
guild_Plank = taxaInRA[, startsWith(colnames(taxaInRA), "euplanctonic_guild")]
guild_HP[is.na(guild_HP)] = 0
guild_LP[is.na(guild_LP)] = 0
guild_Mot[is.na(guild_Mot)] = 0
guild_Plank[is.na(guild_Plank)] = 0
#total abundance for each guild in each sample
#conditional
if (nrow(taxaInRA[which(guild_HP == 1),sampleNumber])){
guild_HP_ab <- sum(taxaInRA[which(guild_HP == 1), sampleNumber, with = F], na.rm = T)
} else {
guild_HP_ab <- 0
}
if (nrow(taxaInRA[which(guild_LP == 1),sampleNumber])){
guild_LP_ab <- sum(taxaInRA[which(guild_LP == 1), sampleNumber, with = F], na.rm = T)
} else {
guild_LP_ab <- 0
}
if (nrow(taxaInRA[which(guild_Mot == 1),sampleNumber])){
guild_Mot_ab <- sum(taxaInRA[which(guild_Mot == 1), sampleNumber, with = F], na.rm = T)
} else {
guild_Mot_ab <- 0
}
if (nrow(taxaInRA[which(guild_Plank == 1),sampleNumber])){
guild_Plank_ab <- sum(taxaInRA[which(guild_Plank == 1), sampleNumber, with = F], na.rm = T)
} else {
guild_Plank_ab <- 0
}
guild_indet <- 100 - sum(guild_HP_ab, guild_LP_ab, guild_Mot_ab, guild_Plank_ab)
if (guild_indet < 0) {
guild_indet <- 0
}
#% abundance for each guild
guild_HP_ab <- round(guild_HP_ab, digits = 3)
guild_LP_ab <- round(guild_LP_ab, digits = 3)
guild_Mot_ab <- round(guild_Mot_ab, digits = 3)
guild_Plank_ab <- round(guild_Plank_ab, digits = 3)
guild_indet <- round(guild_indet, digits = 3)
#taxa used for each guild
guildtaxaused <- length(which(guild_HP == 1 & taxaInRA[, sampleNumber, with =F] > 0))
guildtaxaused <- guildtaxaused + length(which(guild_LP ==
1 & taxaInRA[, sampleNumber] > 0))
guildtaxaused <- guildtaxaused + length(which(guild_Mot ==
1 & taxaInRA[, sampleNumber] > 0))
guildtaxaused <- guildtaxaused + length(which(guild_Plank ==
1 & taxaInRA[, sampleNumber] > 0))
guildtaxaused_taxa <- taxaInRA[which(guild_HP == 1 &
taxaInRA[, sampleNumber] > 0), "species"]
guildtaxaused_taxa <- c(guildtaxaused_taxa, taxaInRA[which(guild_LP ==
1 & taxaInRA[, sampleNumber] > 0), "species"])
guildtaxaused_taxa <- c(guildtaxaused_taxa, taxaInRA[which(guild_Mot ==
1 & taxaInRA[, sampleNumber] > 0), "species"])
guildtaxaused_taxa <- c(guildtaxaused_taxa, taxaInRA[which(guild_Plank ==
1 & taxaInRA[, sampleNumber] > 0), "species"])
guild_values <- c(guild_HP_ab, guild_LP_ab, guild_Mot_ab,
guild_Plank_ab, guild_indet, guildtaxaused)
guilds.results[sampleNumber, ] <- guild_values
setTxtProgressBar(pb, sampleNumber)
}
guildsResults <- diat_guilds(resultLoad)
guildsResults
nrow(taxaInRA[which(guild_HP == 1),sampleNumber])
samplePrueba <- c(0,0,0,0,0,0)
nrow(taxaInRA[which(guild_HP == 1),sampleNumber])
nrow(taxaInRA[which(guild_HP == 1),sampleNumber])>1
diat_guilds <- function(resultLoad){
# First checks if species data frames exist. If not, loads them from CSV files
if(missing(resultLoad)) {
print("Please run the diat_loadData() function first to enter your species data in the correct format")
#handles cancel button
if (missing(resultLoad)){
stop("Calculations cancelled")
}
}
taxaInEco <- resultLoad[[5]]
#checks thata taxaInEco (taxaInEco from diat_Load) has at least recognized some species
if (nrow(taxaInEco)==0){
print("No species were recognized for guild calculations")
print("Guild data will not be available")
guilds.results <- NULL
return(guilds.results)
}
#gets the column named "species", everything before that is a sample
lastcol <- which(colnames(taxaInEco)=="species")
#Convert taxaIn sample data to Relative Abundance data
taxaInRA <- taxaInEco
taxaInRA_samples = taxaInRA[, 1:(lastcol - 1)]
setDT(taxaInRA_samples)
# replace NA with 0
setnafill(taxaInRA_samples, fill = 0)
#compute relative abundances
rel_abu  = apply(taxaInRA_samples, 2, function(x)
round(x / sum(x) * 100, 2))
#remove NAN
rel_abu[is.na(rel_abu)] <- 0
# combine Taxa and other ecological data agian.
taxaInRA = cbind(rel_abu, taxaInRA[, lastcol:ncol(taxaInRA)])
# convert from data.table to tibble
taxaInRA = tibble::tibble(taxaInRA)
#taxaInRA[is.na(taxaInRA)] <- 0
## -- prepare loop
guild_labels <- c("Guild: HP", "Guild: LP", "Guild: Mot",
"Guild: Plank", "Guild: Indet", "Guilds Taxa used")
guilds.results <- data.frame(matrix(ncol = 6, nrow = (lastcol -
1)))
colnames(guilds.results) <- guild_labels
print("Calculating ecological guilds")
pb <- txtProgressBar(min = 1, max = (lastcol - 1), style = 3)
## -- loop to fill guild table
for (sampleNumber in 1:(lastcol - 1)) {
# get columns with each guild and remove NAs
guild_HP    = taxaInRA[, startsWith(colnames(taxaInRA), "high_profile_guild")]
guild_LP    = taxaInRA[, startsWith(colnames(taxaInRA), "low_profile_guild")]
guild_Mot   = taxaInRA[, startsWith(colnames(taxaInRA), "motile_guild")]
guild_Plank = taxaInRA[, startsWith(colnames(taxaInRA), "euplanctonic_guild")]
guild_HP[is.na(guild_HP)] = 0
guild_LP[is.na(guild_LP)] = 0
guild_Mot[is.na(guild_Mot)] = 0
guild_Plank[is.na(guild_Plank)] = 0
#total abundance for each guild in each sample
#conditional
if (nrow(taxaInRA[which(guild_HP == 1),sampleNumber])>1){
guild_HP_ab <- sum(taxaInRA[which(guild_HP == 1), sampleNumber, with = F], na.rm = T)
} else {
guild_HP_ab <- 0
}
if (nrow(taxaInRA[which(guild_LP == 1),sampleNumber])>1){
guild_LP_ab <- sum(taxaInRA[which(guild_LP == 1), sampleNumber, with = F], na.rm = T)
} else {
guild_LP_ab <- 0
}
if (nrow(taxaInRA[which(guild_Mot == 1),sampleNumber])>1){
guild_Mot_ab <- sum(taxaInRA[which(guild_Mot == 1), sampleNumber, with = F], na.rm = T)
} else {
guild_Mot_ab <- 0
}
if (nrow(taxaInRA[which(guild_Plank == 1),sampleNumber])>1){
guild_Plank_ab <- sum(taxaInRA[which(guild_Plank == 1), sampleNumber, with = F], na.rm = T)
} else {
guild_Plank_ab <- 0
}
guild_indet <- 100 - sum(guild_HP_ab, guild_LP_ab, guild_Mot_ab, guild_Plank_ab)
if (guild_indet < 0) {
guild_indet <- 0
}
#% abundance for each guild
guild_HP_ab <- round(guild_HP_ab, digits = 3)
guild_LP_ab <- round(guild_LP_ab, digits = 3)
guild_Mot_ab <- round(guild_Mot_ab, digits = 3)
guild_Plank_ab <- round(guild_Plank_ab, digits = 3)
guild_indet <- round(guild_indet, digits = 3)
#taxa used for each guild
guildtaxaused <- length(which(guild_HP == 1 & taxaInRA[, sampleNumber, with =F] > 0))
guildtaxaused <- guildtaxaused + length(which(guild_LP ==
1 & taxaInRA[, sampleNumber] > 0))
guildtaxaused <- guildtaxaused + length(which(guild_Mot ==
1 & taxaInRA[, sampleNumber] > 0))
guildtaxaused <- guildtaxaused + length(which(guild_Plank ==
1 & taxaInRA[, sampleNumber] > 0))
guildtaxaused_taxa <- taxaInRA[which(guild_HP == 1 &
taxaInRA[, sampleNumber] > 0), "species"]
guildtaxaused_taxa <- c(guildtaxaused_taxa, taxaInRA[which(guild_LP ==
1 & taxaInRA[, sampleNumber] > 0), "species"])
guildtaxaused_taxa <- c(guildtaxaused_taxa, taxaInRA[which(guild_Mot ==
1 & taxaInRA[, sampleNumber] > 0), "species"])
guildtaxaused_taxa <- c(guildtaxaused_taxa, taxaInRA[which(guild_Plank ==
1 & taxaInRA[, sampleNumber] > 0), "species"])
guild_values <- c(guild_HP_ab, guild_LP_ab, guild_Mot_ab,
guild_Plank_ab, guild_indet, guildtaxaused)
guilds.results[sampleNumber, ] <- guild_values
setTxtProgressBar(pb, sampleNumber)
}
close(pb)
return(guilds.results)
}
diat_guilds(resultLoad)
library(diathor)
#TEST ALL FUNCTIONS
diaThorAll()
library(diathor)
diatbarcode::get_diatbarcode(version = "last")
library(diathor)
data("diat_sampleData")
force(diat_sampleData)
View(diat_sampleData)
write.csv(diat_sampleData, file.choose())
load("D:/Users/Juaco/Google Drive/R Scripts/Paquetes propios/DiaThor/DiaThor - Git+CRAN/DiaThor - PostOmnidia/v0.0.8/data/dbc_offline.rda")
View(dbc_offline)
## FRESH TEST AFTER THE REVIEW
species_df <- as.data.frame(read.csv("C:/Users/Juaco/Desktop/Prueba nueva DiaThor/datos_nuevos.csv"))
resultsPath <- "C:/Users/Juaco/Desktop/Prueba nueva DiaThor/Resultados"
maxDistTaxa = 2
resultLoad <- diat_loadData(species_df, resultsPath = resultsPath)
library(diathor)
resultLoad <- diat_loadData(species_df, resultsPath = resultsPath)
diat_diversity(resultLoad)
>>>>>>> Stashed changes
