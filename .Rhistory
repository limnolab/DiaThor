return(vandam.results)
}
v1 <- v2 <- vd1 <- vd2 <- vd3 <- vd4 <- vd5 <- vd6 <- vd7 <-NULL
#gets the column named "species", everything before that is a sample
lastcol <- which(colnames(taxaInEco)=="species")
taxaInRA <- taxaInEco
setDT(taxaInRA)
taxaInRa_samples = taxaInRA[,1:(lastcol-1)]
setnafill(taxaInRa_samples, fill=0)
rel_abu  = apply(taxaInRa_samples, 2, function(x)
round(x / sum(x) * 100, 2))
taxaInRA = cbind(rel_abu, taxaInRA[, lastcol:ncol(taxaInRA)])
taxaInRA[is.na(taxaInRA)] <- 0
resultsPath <- resultLoad[[4]]
if (vandamReports == TRUE & is.na(resultsPath) == TRUE) {
print("Select Results folder for the detailed VanDam reports")
resultsPath <- choose.dir(default = "", caption = "Select folder for your Results")
}
if (vandamReports == TRUE & is.na(resultsPath) == FALSE) {
print("Exporting detailed reports for VanDam ecological preferences")
print(resultsPath)
vandamtaxafile = paste("VanDam Taxa used.txt", sep = "")
write("TAXA USED FOR EACH ECOLOGICAL VARIABLE USING VANDAM's CLASSIFICATION",
file = file.path(resultsPath,vandamtaxafile))
write("These taxa were included because: ", file = file.path(resultsPath,vandamtaxafile), append = TRUE)
write("a) they had a reliable classification in VanDam's classification system", file = file.path(resultsPath,vandamtaxafile), append = TRUE)
write("b) they had a relative abundance in the sample > 0", file = file.path(resultsPath,vandamtaxafile), append = TRUE)
}
# begin loop over different variables
ls_labels = list(
salinity = c(
"VD Salinity 1",
"VD Salinity 2",
"VD Salinity 3",
"VD Salinity 4",
"VD Salinity Indet",
"VD Salinity Taxa used"
),
heterotrophy = c(
"VD N-Het 1",
"VD N-Het 2",
"VD N-Het 3",
"VD N-Het 4",
"VD N-Het Indet",
"VD N-Het Taxa used"
),
oxygen = c(
"VD Oxygen 1",
"VD Oxygen 2",
"VD Oxygen 3",
"VD Oxygen 4",
"VD Oxygen 5",
"VD Oxygen Indet",
"VD Oxygen Taxa used"
),
saprobity = c(
"VD Saprobity 1",
"VD Saprobity 2",
"VD Saprobity 3",
"VD Saprobity 4",
"VD Saprobity 5",
"VD Saprobity Indet",
"VD Saprobity Taxa used"
),
aero = c(
"VD Aero 1",
"VD Aero 2",
"VD Aero 3",
"VD Aero 4",
"VD Aero 5",
"VD Aero Indet",
"VD Aero Taxa used"
),
trophic = c(
"VD Trophic 1",
"VD Trophic 2",
"VD Trophic 3",
"VD Trophic 4",
"VD Trophic 5",
"VD Trophic 6",
"VD Trophic 7",
"VD Trophic Indet",
"VD Trophic Taxa used"
)
)
# list to hold loop outputs
ls_output = list()
for (i in 1:6){
# setting up switches
vdam_var = switch (i,
taxaInRA[, "vdams"],
taxaInRA[, "vdamnh"],
taxaInRA[, "vdamo2"],
taxaInRA[, "vdamsap"],
taxaInRA[, "vdamaero"],
taxaInRA[, "vdamtrop"])
mess_var = switch(i,
"salinity",
"N-heterotrophy",
"oxygen requirements",
"saprobity",
"aero",
"trophic state")
print(paste("Calculating Van Dam", mess_var))
vdam_var[is.na(vdam_var)] = 0
lp_data =  suppressWarnings(data.table(
vd1 = unlist(taxaInRA[which(vdam_var == 1),
lapply(.SD, sum, na.rm = TRUE),
.SDcols = 1:(lastcol - 1)]),
vd2 = unlist(taxaInRA[which(vdam_var == 2),
lapply(.SD, sum, na.rm = TRUE),
.SDcols = 1:(lastcol - 1)]),
vd3 = unlist(taxaInRA[which(vdam_var == 3),
lapply(.SD, sum, na.rm = TRUE),
.SDcols = 1:(lastcol - 1)]),
vd4 = unlist(taxaInRA[which(vdam_var == 4),
lapply(.SD, sum, na.rm = TRUE),
.SDcols = 1:(lastcol - 1)])
))
if (i > 2){
lp_data[, vd5 := unlist(taxaInRA[which(vdam_var == 5),
lapply(.SD, sum, na.rm = TRUE),
.SDcols = 1:(lastcol - 1)])]
}
if (i == 6){
lp_data[, vd6 := unlist(taxaInRA[which(vdam_var == 6),
lapply(.SD, sum, na.rm = TRUE),
.SDcols = 1:(lastcol - 1)])]
lp_data[, vd7 := unlist(taxaInRA[which(vdam_var == 7),
lapply(.SD, sum, na.rm = TRUE),
.SDcols = 1:(lastcol - 1)])]
}
#remove possible NAs
lp_data[is.na(lp_data)] <- 0
## indet ##
if (i < 3) {
lp_data[      , v1 := round(100 - (vd1 + vd2 + vd3 + vd4), 1)]
} else if (i == 4 | i == 5){
lp_data[      , v1 := round(100 - (vd1 + vd2 + vd3 + vd4 + vd5), 1)]
} else if (i == 6){
lp_data[      , v1 := round(100 - (vd1 + vd2 + vd3 + vd4 + vd5 + vd6 +vd7), 1)]
}
lp_data[v1 < 0, v1 := 0]
##  taxa used ##
# - prepare numeric column
lp_data[      , v2 := numeric(lastcol - 1)]
# - count the number of entries for each column that are not zero and
# - are also not zero included in the vector of classes (i.e. vdams_v).
te2 = purrr::map(.x = 1:(lastcol - 1),
.f = ~ taxaInRa_samples[, .x, with = F] > 0 &
vdam_var != 0)
# - te2 is a list with one one dimensional array per element.
# - each array represents one columns of taxaInRa
# - We want to unlist the list and store it in a data.frame
te3 = matrix(unlist(te2), ncol = lastcol - 1, byrow = TRUE) %>%
as.data.frame()
# rename columns
names(te3) = names(taxaInRa_samples)
# - until now the column of te3 are boolean - sum up to obtain number of
# - species
lp_data[, v2 := colSums(te3)]
names(lp_data) = ls_labels[[i]]
ls_output[[i]] = lp_data
# write used taxa to file
if (vandamReports & exists("resultsPath")){
print_taxa = lapply(te2, function(x)taxaInRA$recognizedSp[x])
for (print.i in seq_along(print_taxa)){
write(paste(str_to_upper(mess_var), "- Sample:", colnames(taxaInRA)[print.i]),
file.path(resultsPath, vandamtaxafile),
append = TRUE)
write(print_taxa[[print.i]], file.path(resultsPath, vandamtaxafile), append = TRUE)
}
}
rm(vdam_var, te3, te2, lp_data, mess_var)
}
if (nrow(ls_output[[1]]) > 0){
vandam.results <- data.frame(ls_output[[1]])
}
if (nrow(ls_output[[2]]) > 0){
vandam.results <- cbind(vandam.results, data.frame(ls_output[[2]]))
}
if (nrow(ls_output[[3]]) > 0){
vandam.results <- cbind(vandam.results, data.frame(ls_output[[3]]))
}
if (nrow(ls_output[[4]]) > 0){
vandam.results <- cbind(vandam.results, data.frame(ls_output[[4]]))
}
if (nrow(ls_output[[5]]) > 0){
vandam.results <- cbind(vandam.results, data.frame(ls_output[[5]]))
}
if (nrow(ls_output[[6]]) > 0){
vandam.results <- cbind(vandam.results, data.frame(ls_output[[6]]))
}
vandam.results[is.na(vandam.results)] <- 0 #have to remove NAs for plotting
return(vandam.results)
}
res <- diat_vandam(resultLoad)
View(res)
version()
?version
cite
cite?
asd
?cite
citatio()
citation()
citation("diathor")
library(diathor)
diaThorAll()
install_github("limnolab/DiaThor")
devtools::install_github("limnolab/DiaThor")
install.packages("devtools")
devtools::install_github("limnolab/DiaThor")
Sys.setenv("TAR" = "internal")
devtools::install_github("limnolab/DiaThor")
install.packages("RTools")
roxygen2::roxygenise()
library(diathor)
resultLoad <- diaThorAll()
resultLoad <- diaThorAll()
resultLoad <- diaThorAll()
resultLoad <- diat_loadData()
diat_ips(resultLoad)
diat_idap(resultLoad)
taxaIn <- resultLoad[[2]] #indices use raw matrix
#Loads the species list specific for this index
idapDB <- diathor::idap
#creates a species column with the rownames to fit in the script
taxaIn$species <- row.names(taxaIn)
# #the ones still not found (NA), try against fullspecies
taxaIn$idap_v <- NA
taxaIn$idap_s <- NA
print("Calculating IDAP index")
for (i in 1:nrow(taxaIn)) {
if (is.na(taxaIn$idap_s[i]) | is.na(taxaIn$idap_v[i])){
# New in v0.0.8
# Uses the stringdist package to find species by names heuristically, with a maximum distance = maxDistTaxa
# if multiple are found, uses majority consensus to select the correct index value
# 1) find the species by heuristic search
spname <- trimws(tolower(rownames(taxaIn[i,])))
species_found <- idapDB[stringdist::ain(trimws(tolower(idapDB$fullspecies)),spname, maxDist=maxDistTaxa, matchNA = FALSE),]
# 2) if found, build majority consensus for sensitivity values
if (nrow(species_found) == 1){
vvalue <- as.numeric(names(which.max(table(species_found$idap_v))))
svalue <- as.numeric(names(which.max(table(species_found$idap_s))))
taxaIn$new_species[i] <- species_found$fullspecies[1]
} else if (nrow(species_found) > 1){
species_found <- species_found[match(spname, trimws(tolower(species_found$fullspecies)), nomatch=1),]
vvalue <- as.numeric(names(which.max(table(species_found$idap_v))))
svalue <- as.numeric(names(which.max(table(species_found$idap_s))))
} else if (nrow(species_found) == 0){
#species not found, try tautonomy in variety
spsplit <- strsplit(spname, " ") #split the name
#if has epiteth
if (length(spsplit[[1]])>1){
#create vectors with possible epiteths
newspname <- paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "var.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ") #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "fo.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "subsp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "spp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "ssp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "var.", spsplit[[1]][[2]], "fo.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
#search again against all possible epiteths
species_found <- idapDB[stringdist::ain(trimws(tolower(idapDB$fullspecies)),newspname, maxDist=maxDistTaxa, matchNA = FALSE),]
if (nrow(species_found) > 0){
#found with tautonomy
vvalue <- as.numeric(names(which.max(table(species_found$idap_v[1]))))
svalue <- as.numeric(names(which.max(table(species_found$idap_s[1]))))
taxaIn$new_species[i] <- species_found$fullspecies[1]
} else {
#species not found, make everything NA
vvalue = NA
svalue = NA
}
}
}
#records the final consensus value
taxaIn$idap_v[i] <- vvalue
taxaIn$idap_s[i] <- svalue
}
}
maxDistTaxa = 2
for (i in 1:nrow(taxaIn)) {
if (is.na(taxaIn$idap_s[i]) | is.na(taxaIn$idap_v[i])){
# New in v0.0.8
# Uses the stringdist package to find species by names heuristically, with a maximum distance = maxDistTaxa
# if multiple are found, uses majority consensus to select the correct index value
# 1) find the species by heuristic search
spname <- trimws(tolower(rownames(taxaIn[i,])))
species_found <- idapDB[stringdist::ain(trimws(tolower(idapDB$fullspecies)),spname, maxDist=maxDistTaxa, matchNA = FALSE),]
# 2) if found, build majority consensus for sensitivity values
if (nrow(species_found) == 1){
vvalue <- as.numeric(names(which.max(table(species_found$idap_v))))
svalue <- as.numeric(names(which.max(table(species_found$idap_s))))
taxaIn$new_species[i] <- species_found$fullspecies[1]
} else if (nrow(species_found) > 1){
species_found <- species_found[match(spname, trimws(tolower(species_found$fullspecies)), nomatch=1),]
vvalue <- as.numeric(names(which.max(table(species_found$idap_v))))
svalue <- as.numeric(names(which.max(table(species_found$idap_s))))
} else if (nrow(species_found) == 0){
#species not found, try tautonomy in variety
spsplit <- strsplit(spname, " ") #split the name
#if has epiteth
if (length(spsplit[[1]])>1){
#create vectors with possible epiteths
newspname <- paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "var.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ") #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "fo.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "subsp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "spp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "ssp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "var.", spsplit[[1]][[2]], "fo.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
#search again against all possible epiteths
species_found <- idapDB[stringdist::ain(trimws(tolower(idapDB$fullspecies)),newspname, maxDist=maxDistTaxa, matchNA = FALSE),]
if (nrow(species_found) > 0){
#found with tautonomy
vvalue <- as.numeric(names(which.max(table(species_found$idap_v[1]))))
svalue <- as.numeric(names(which.max(table(species_found$idap_s[1]))))
taxaIn$new_species[i] <- species_found$fullspecies[1]
} else {
#species not found, make everything NA
vvalue = NA
svalue = NA
}
}
}
#records the final consensus value
taxaIn$idap_v[i] <- vvalue
taxaIn$idap_s[i] <- svalue
}
}
i
is.na(taxaIn$idap_s[i])
is.na(taxaIn$idap_v[i])
# New in v0.0.8
# Uses the stringdist package to find species by names heuristically, with a maximum distance = maxDistTaxa
# if multiple are found, uses majority consensus to select the correct index value
# 1) find the species by heuristic search
spname <- trimws(tolower(rownames(taxaIn[i,])))
spname
species_found <- idapDB[stringdist::ain(trimws(tolower(idapDB$fullspecies)),spname, maxDist=maxDistTaxa, matchNA = FALSE),]
species_found
maxDistTaxa=3
species_found <- idapDB[stringdist::ain(trimws(tolower(idapDB$fullspecies)),spname, maxDist=maxDistTaxa, matchNA = FALSE),]
species_found
maxDistTaxa=6
species_found <- idapDB[stringdist::ain(trimws(tolower(idapDB$fullspecies)),spname, maxDist=maxDistTaxa, matchNA = FALSE),]
species_found
maxDistTaxa=2
species_found <- idapDB[stringdist::ain(trimws(tolower(idapDB$fullspecies)),spname, maxDist=maxDistTaxa, matchNA = FALSE),]
View(idapDB)
nrow(species_found)
spsplit <- strsplit(spname, " ")
spsplit
length(spsplit[[1]])
taxaIn <- resultLoad[[2]] #indices use raw matrix
#Loads the species list specific for this index
idapDB <- diathor::idap
#creates a species column with the rownames to fit in the script
taxaIn$species <- row.names(taxaIn)
# #the ones still not found (NA), try against fullspecies
taxaIn$idap_v <- NA
taxaIn$idap_s <- NA
print("Calculating IDAP index")
for (i in 1:nrow(taxaIn)) {
if (is.na(taxaIn$idap_s[i]) | is.na(taxaIn$idap_v[i])){
# New in v0.0.8
# Uses the stringdist package to find species by names heuristically, with a maximum distance = maxDistTaxa
# if multiple are found, uses majority consensus to select the correct index value
# 1) find the species by heuristic search
spname <- trimws(tolower(rownames(taxaIn[i,])))
species_found <- idapDB[stringdist::ain(trimws(tolower(idapDB$fullspecies)),spname, maxDist=maxDistTaxa, matchNA = FALSE),]
# 2) if found, build majority consensus for sensitivity values
if (nrow(species_found) == 1){
vvalue <- as.numeric(names(which.max(table(species_found$idap_v))))
svalue <- as.numeric(names(which.max(table(species_found$idap_s))))
taxaIn$new_species[i] <- species_found$fullspecies[1]
} else if (nrow(species_found) > 1){
species_found <- species_found[match(spname, trimws(tolower(species_found$fullspecies)), nomatch=1),]
vvalue <- as.numeric(names(which.max(table(species_found$idap_v))))
svalue <- as.numeric(names(which.max(table(species_found$idap_s))))
} else if (nrow(species_found) == 0){
#species not found, try tautonomy in variety
spsplit <- strsplit(spname, " ") #split the name
#if has epiteth
if (length(spsplit[[1]])>1){
#create vectors with possible epiteths
newspname <- paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "var.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ") #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "fo.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "subsp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "spp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "ssp.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
newspname <- c(newspname, paste(spsplit[[1]][[1]], spsplit[[1]][[2]], "var.", spsplit[[1]][[2]], "fo.", spsplit[[1]][[length(spsplit[[1]])]], sep = " ")) #create new sp name
#search again against all possible epiteths
species_found <- idapDB[stringdist::ain(trimws(tolower(idapDB$fullspecies)),newspname, maxDist=maxDistTaxa, matchNA = FALSE),]
if (nrow(species_found) > 0){
#found with tautonomy
vvalue <- as.numeric(names(which.max(table(species_found$idap_v[1]))))
svalue <- as.numeric(names(which.max(table(species_found$idap_s[1]))))
taxaIn$new_species[i] <- species_found$fullspecies[1]
} else {
#species not found, make everything NA
vvalue = NA
svalue = NA
}
} else {
# length(spsplit[[1]]) =<1
#species not found, make everything NA
vvalue = NA
svalue = NA
}
}
#records the final consensus value
taxaIn$idap_v[i] <- vvalue
taxaIn$idap_s[i] <- svalue
}
}
#gets the column named "new_species", everything before that is a sample
lastcol <- which(colnames(taxaIn)=="new_species")
#creates results dataframe
idap.results <- data.frame(matrix(ncol = 3, nrow = (lastcol-1)))
colnames(idap.results) <- c("IDAP", "IDAP20", "num_taxa")
#finds the column
idap_s <- (taxaIn[,"idap_s"])
idap_v <- (taxaIn[,"idap_v"])
number_recognized_taxa <- round((100 - (sum(is.na(taxaIn$idap_s)) / nrow(taxaIn))*100),1)
print(paste("Taxa recognized to be used in IDAP index: ", number_recognized_taxa, "%"))
#PROGRESS BAR
pb <- txtProgressBar(min = 1, max = (lastcol-1), style = 3)
for (sampleNumber in 1:(lastcol-1)){ #for each sample in the matrix
#how many taxa will be used to calculate?
#Revised v0.0.8
num_taxa <- length(which(idap_s * taxaIn[,sampleNumber] > 0))
#remove the NA
idap_s[is.na(idap_s)] = 0
idap_v[is.na(idap_v)] = 0
IDAP <- sum((taxaIn[,sampleNumber]*as.double(idap_s)*as.double(idap_v)))/sum(taxaIn[,sampleNumber]*as.double(idap_v)) #raw value
IDAP20 <- (4.75*IDAP)-3.75
idap.results[sampleNumber, ] <- c(IDAP, IDAP20,num_taxa)
#update progressbar
setTxtProgressBar(pb, sampleNumber)
}
#close progressbar
close(pb)
#PRECISION RECORDING
resultsPath <- resultLoad[[4]]
#reads the csv file
precisionmatrix <- read.csv(file.path(resultsPath, "num_taxa.csv"))
#joins with the precision column
precisionmatrix <- cbind(precisionmatrix, idap.results$num_taxa)
precisionmatrix <- precisionmatrix[-(1:which(colnames(precisionmatrix)=="Sample")-1)]
names(precisionmatrix)[names(precisionmatrix)=="idap.results$num_taxa"] <- "IDAP"
write.csv(precisionmatrix, file.path(resultsPath, "num_taxa.csv"))
#TAXA INCLUSION
#taxa with acronyms
taxaIncluded <- taxaIn$new_species[which(taxaIn$idap_s > 0)]
#inclusionmatrix <- read.csv(paste(resultsPath,"\\Taxa included.csv"))
inclusionmatrix <- read.csv(file.path(resultsPath, "Taxa included.csv"))
colnamesInclusionMatrix <- c(colnames(inclusionmatrix), "IDAP")
#creates a new data matrix to append the existing Taxa Included file
newinclusionmatrix <- as.data.frame(matrix(nrow=max(length(taxaIncluded), nrow(inclusionmatrix)), ncol=ncol(inclusionmatrix)+1))
for (i in 1:ncol(inclusionmatrix)){
newinclusionmatrix[1:nrow(inclusionmatrix),i] <- as.character(inclusionmatrix[1:nrow(inclusionmatrix),i])
}
if (nrow(newinclusionmatrix) > length(taxaIncluded)){
newinclusionmatrix[1:length(taxaIncluded), ncol(newinclusionmatrix)] <- taxaIncluded
} else {
newinclusionmatrix[1:nrow(newinclusionmatrix), ncol(newinclusionmatrix)] <- taxaIncluded
}
inclusionmatrix <- newinclusionmatrix
colnames(inclusionmatrix) <- colnamesInclusionMatrix
inclusionmatrix <- inclusionmatrix[-(1:which(colnames(inclusionmatrix)=="Eco.Morpho")-1)]
#write.csv(inclusionmatrix, paste(resultsPath,"\\Taxa included.csv", sep=""))
write.csv(inclusionmatrix, file.path(resultsPath,"Taxa included.csv"))
#END TAXA INCLUSION
#EXCLUDED TAXA
taxaExcluded <- taxaIn[!('%in%'(taxaIn$new_species,taxaIncluded)),"new_species"]
#exclusionmatrix <- read.csv(paste(resultsPath,"\\Taxa excluded.csv", sep=""))
exclusionmatrix <- read.csv(file.path(resultsPath, "Taxa excluded.csv"))
#creates a new data matrix to append the existing Taxa Included file
newexclusionmatrix <- as.data.frame(matrix(nrow=max(length(taxaExcluded), nrow(exclusionmatrix)), ncol=ncol(exclusionmatrix)+1))
for (i in 1:ncol(exclusionmatrix)){
newexclusionmatrix[1:nrow(exclusionmatrix),i] <- as.character(exclusionmatrix[1:nrow(exclusionmatrix),i])
}
if (nrow(newexclusionmatrix) > length(taxaExcluded)){
newexclusionmatrix[1:length(taxaExcluded), ncol(newexclusionmatrix)] <- taxaExcluded
} else {
newexclusionmatrix[1:nrow(newexclusionmatrix), ncol(newexclusionmatrix)] <- taxaExcluded
}
exclusionmatrix <- newexclusionmatrix
colnames(exclusionmatrix) <- colnamesInclusionMatrix
exclusionmatrix <- exclusionmatrix[-(1:which(colnames(exclusionmatrix)=="Eco.Morpho")-1)]
#write.csv(exclusionmatrix, paste(resultsPath,"\\Taxa excluded.csv", sep=""))
write.csv(exclusionmatrix, file.path(resultsPath,"Taxa excluded.csv"))
rownames(idap.results) <- resultLoad[[3]]
return(idap.results)
idap.results
resultLoad <- diat_loadData()
diat_idap(resultLoad)
library(diathor)
diat_idap(resultLoad)
diat_lobo(resultLoad)
diat_pbidw(resultLoad)
diat_sla(resultLoad)
diat_spear(resultLoad)
results <- diaThorAll()
results <- diaThorAll()
library(diathor)
results <- diaThorAll()
getwd()
setwd("D:/Users/Juaco/Google Drive/R Scripts/Paquetes propios/DiaThor/DiaThor - Git+CRAN/DiaThor - PostOmnidia/v0.1.0")
roxygen2::roxygenise()
roxygen2::roxygenise()
